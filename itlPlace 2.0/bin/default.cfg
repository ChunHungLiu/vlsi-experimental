params:
{
  //techname = "IWLS"; //default
  //techname = "NangateMapped"; //with technology mapping
  //techname = "Nangate"; //withiout technology mapping
  //techname = "ISPD";

  //objective = "LSE"; //default
  //objective = "SOD";

  //def = "b01.def";
  //def = "dma.def";                       //3227 cells
  //def = ".\\IWLS05\\RISC.def";           //59974 cells
  //def = "ibm01LD.def";
  //lef = "ibm01LD.lef";
  
  //def = "tv80.def";
  //def = ".\\ExportDEF\\def_2!.def";
  //def = ".\\IWLS05\\s298.def";           //141 cells
  //def = ".\\IWLS05\\pci_spoci_ctrl.def"; //1267 cells
  //def = ".\\IWLS05\\tv80.def";           //7161 cells
  //def = ".\\IWLS05\\ac97_ctrl.def";      //11855 cells
  //def = ".\\IWLS05\\_b21.def";            //18718 cells
  //def = ".\\IWLS05\\b22.def";            //28317 cells
  //def = ".\\IWLS05\\b17.def";            //37117 cells
  //def = ".\\IWLS05\\ethernet.def";       //46771 cells
  //def = ".\\IWLS05\\des_perf.def";       //98341 cells
  //def = ".\\ExportDEF\\2009-09-25_17-42-15_s298.def";
  //def = ".\\ExportDEF\\2009-09-25_17-43-02_s298.def";
  //def = ".\\ExportDEF\\2009-09-25_17-17-56_ac97_ctrl.def";
  target_clock_cycle = 0.0;
};

plotter:
{
  //enabled = true;
  windowHeight = 750;
  autoRefreshStep = 10;
  saveImages = true;
  saveMilestoneImages = true;
  //createVideo = true;
};

DesignFlow:
{
  SkipSpecialNets = true;
  nMacroIterations = 1;

  //RandomPlacement = true;
  GlobalPlacement = true;
  Legalization = true;
  //DetailedPlacement = true;
  //DrawCongestionMap = true; //needs testing
  //FGRRouting = true; //needs testing
  Timing = true;
  //Buffering = true; //not stable
};

Clustering:
{
  useClusteringInformationFromFile  = true;
  desiredNumberOfClustersAtEveryBin = 5;
  clusterRatio                      = 5;
  desiredFinalNumberOfClusters      = 6000;
  clustersAreaTolerance             = 1.5;
};

GlobalPlacement="@$(params.objective:LSE).GlobalPlacement";
TAOOptions="@$(params.objective:LSE).TAOOptions";

LSE:
{
  GlobalPlacement:
  {
    useQAClass = true;
    earlyExit = true;

    useLogSumExp     = true;
    useQuadraticSpreading = true;
    useUnidirectSpreading = true;  //used only with useQuadraticSpreading = true 
    useBorderBounds    = true;

    plotGradients   = true;
    gradientScaling = 10000.0;
    
    bufferName = "INVX2";
  };

  TAOOptions:
  {
    muInitialMultiplier = 0.1;
    frtol = 1.0e-8;
  };
};

SOD:
{
  GlobalPlacement:
  {
    useQAClass = true;
    earlyExit = true;
    improvementTreshold = -0.00; //-0.01 means 1% improvement decrease allowed
    nTolerantIterations = 2;

    useSumOfDelays = true;
    useQuadraticSpreading = true;
    useUnidirectSpreading = true;  //used only with useQuadraticSpreading = true 
    useBorderBounds    = true;

    bufferName = "INVX2";
    bufferCountUpperBound = 0.0; //set to 0 if you want to disable joint algorithm

    plotGradients   = true;
    gradientScaling = 0.1;
  };

  TAOOptions:
  {
    gradientBalance = 1.0e-10;
    muInitialMultiplier = 0.05;
    frtol = 1.0e-5;
  };
};

DetailedPlacement:
{
  HorizontalSearch:
  {
    active = true;
  };
  
  GlobalSwap:
  {
    active = true;
  };
  
  VerticalSearch:
  {
    active = true;
  };
};

Buffering:
{
  steps = 20;
  doReportBuffering = false;
  plotBuffering = false;
  plotWait = 1000;
  isNetBufferNotDegradation = false;
  isLegalization = false;
  netIter = 0; //временный параметр
  DefaultBuffer:
  {
    Macro="BUF_ITL";
    InputPin = "A";
    OutputPin = "Y";
  };
};

Timing:
{
  CalulateUnidirectionally = true;
};

CriticalPaths:
{
  countLogReportCriticalPaths = 0;  //set to -1 if you want to print all the critical paths
  countPlotCriticalPaths = 0;       //set to -1 if you want to plot all the critical paths
};

NetWeighting:
{
  //useNetWeights = true;
  netWeightsImportFileName = "";
  netWeightsExportFileName = "";
};

Abacus:
{
  //usePlotter = true;
  plotterStep = 100;
  useWeights = false;
  weightMultiplier = 1;
};

CongestionMap:
{
    nHorTiles  = 30;
    nVertTiles = 30;
    nMaxLines  = 10; //all wires
    nMaxCLines = 4; //critical wires
    nMaxPins   = 10;
};

FGRRouting:
{
  maxRoutingTime        = 86400; //max time to work in seconds
  calculateCapacity     = true;  //use (or not) formula to calculate capacity
  powerTracsPerRow      = 2;
  verticalCapacity      = 20;
  horizontalCapacity    = 20;
  nHorTiles             = 0; //if 0 then
  nVertTiles            = 0; //nHorTiles == nVertTiles == nRows / 2
  FGROutputFile         = "@params.def";
  PrintToRoutersFormats = false;
  ISPDFileName          = "@params.def";
  LabyrinthFileName     = "@params.def";
};

Config:
{
	//Trace = true;
	Replicate = true;
};