#ifndef __LOW_ROUTING_H__
#define __LOW_ROUTING_H__

//Routing types (flags)
enum RoutingType
{
  RoutingType_Unrouted  = 0,           /// Tree isn't routed yet.
  RoutingType_Flute     = 1,           /// A-Tree generated by FLUTE utility.
  RoutingType_HPWL      = 2,           /// Substitute for tree when used HPWL approximation.
  RoutingType_Routed    = 4,           /// A-Tree generated by external router tool.
  RoutingType_ATree 
    = (RoutingType_Flute | RoutingType_Routed), /// Tree corresponds to A-Tree definition.
  RoutingType_Default   = 0
};

struct LRouting
{
  //binded to nets
  double *netWL;                /// Wire length.
  RoutingType *netRoutingType;  /// Tree type.

  //binded to pins (routing points)
  //with positive indexes - match pins one-to-one
  //with negative indexes - for internal routing points
  double *rpX;           ///nm  x coordinate
  double *rpY;           ///nm  y coordinate
  int *rpLeft;
  int *rpRight;
  int nFreeRPIndex;      /// Index of first free routing point.
                         /// Other free points can be found using rpLeft index.
  int nInternalRPCount;  /// number of allocated internal routing points.
  int nInternalRPLimit;

  LRouting()
  {
    netWL = 0;
    netRoutingType = 0;
    rpX = 0;
    rpY = 0;
    rpLeft = 0;
    rpRight = 0;
    nFreeRPIndex = 0;
    nInternalRPCount = 0;
    nInternalRPLimit = 0;
  }
};

#endif //__LOW_ROUTING_H__