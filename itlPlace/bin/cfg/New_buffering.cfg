params:
{
  techname = "IWLS"; //default
  //techname = "NangateMapped"; //with technology mapping
  //techname = "Nangate";       //without technology mapping
  //techname = "ISPD";

  def = "tv80.def";

  target_clock_cycle = 0.0;
};

plotter:
{
  //enabled = true;
  windowHeight = 1000;
  histogramWindowHeight = 300;
  histogramWindowWidth = 1200;
  autoRefreshStep = 10;
  saveImages = true;
  saveMilestoneImages = true;
  embeedMilestones = true;
  //createVideo = true;
};

DesignFlow:
{
  //PRE-RUN SECTION
  SkipSpecialNets = true;
  
  //MACRO LOOP SECTION
  nMacroIterations = 0;
  //LoopRandomPlacement = true;
  //LoopGlobalPlacement = true;
  //LoopLR          = true;
  //LoopLegalization = true;
  //LoopDetailedPlacement = true;

  //STANDARD PLACEMENT SECTION
  //RandomPlacement = true;
  Legalization = true;
  //DetailedPlacement = true;
  //HippocratePlacement = true;
  
  //REPEATERS INSERTION SECTION
  //Buffering = true;
  New_Buffering = true;
  //BufRandomPlacement = true;
  //BufGlobalPlacement = true;
  //BufLR          = true;
  BufLegalization = true;
  //BufDetailedPlacement = true;
};

MacroLoop:
{
    QAcriteria = "LTNS";
};

DetailedPlacement:
{
  HorizontalSearch:
  {
    active = true;
    plotter: {enabled = false;};
  };
  
  GlobalSwap:
  {
    active = true;
    plotter: {enabled = false;};
  };
  
  VerticalSearch:
  {
    active = true;
    plotter: {enabled = false;};
  };
  
  useConstraints = false;
};

HippocratePlacement:
{
//	SWAP = true;
	MOVE =  true;
	LOCALMOVE = true;
	COMPACT = true;
	CENTER = true;

	KamaevCheckConstraints = true;

	PathsInCriticalOrder = true;

	LogEveryIteration=true;
	FindOnlyInsideGaps = true; //COMPACT
};

Timing:
{
  SignalDirectionsUsed = 1; //rise\fall
  RCE:
  {
    LayersUsed = 3;//0 - lumped (=1 with simplified C extraction), 1 or 2, 3=Hippocrate
  };
};

CriticalPaths:
{
  countLogReportCriticalPaths = 0;  //set to -1 if you want to print all the critical paths
  countPlotCriticalPaths = 0;       //set to -1 if you want to plot all the critical paths
  plotWait = 1;
};

Legalization:
{
  Abacus:
  {
    //usePlotter = true;
    plotterStep = 100;
    //useWeights = true;
    weightMultiplier = 1;
  };
};

Buffering:
{
  LSE: { Clustering: { useClusteringInformationFromFile  = false; }; };
  SOD: { Clustering: { useClusteringInformationFromFile  = false; }; };
  LR:  { Clustering: { useClusteringInformationFromFile  = false; }; };

  DefaultBuffer:
  {
    Macro="BUF_ITL";
    InputPin = "A";
    OutputPin = "Y";
  };
  Percent = 1.00;
  Iterations = 15;
  DoIterative = false;
  
  Legalization:
  {
    doReport = false;
  };
};