<?xml version="1.0" encoding="ISO-8859-1"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xd="http://www.pnp-software.com/XSLTdoc">
  
  <xd:doc type="stylesheet">
    <xd:author>João Daniel Togni</xd:author>
    <xd:MyProperty>
      <xd:MyCaption>Maintained by:</xd:MyCaption>
      <xd:MyLine>Rodrigo Gasparoni Santos</xd:MyLine>
    </xd:MyProperty>
    <xd:copyright>&#169; 2006, Nangate Inc. All rights reserved.</xd:copyright>
    <xd:MyProperty>
      <xd:MyCaption>Copyright Notice:</xd:MyCaption>
      <xd:MyLine>This document contains confidential and proprietary information.</xd:MyLine>
      <xd:MyLine>Reproduction or usage of this document, in part or whole, by any means, electrical, mechanical, optical, chemical or otherwise is prohibited, without written permission from Nangate Inc.</xd:MyLine>
      <xd:MyLine>The information contained herein is protected by Danish and international copyright laws.</xd:MyLine>
    </xd:MyProperty>
    <xd:cvsId>$Id: Cell.xsl_,v 1.14 2008/01/23 15:16:23 lre Exp $</xd:cvsId>
    <xd:short>Cell scripts</xd:short>
    <xd:detail>Contains the stylesheets used to build cell pages</xd:detail>
  </xd:doc>
  
  <xsl:include href="Includes.xsl"/>
  <xsl:include href="Utils.xsl"/>
  <xsl:include href="UnitConversion.xsl"/>
  <xsl:include href="NavigationBar.xsl"/>
  <xsl:include href="TimingTable.xsl"/>
  
  <xsl:variable name="useSummary" select="$Config/cell/@genSummary"/>
  <xsl:variable name="useTruthTable" select="$Config/cell/@genTruthTable"/>
  
  
  
  <!-- Cell -->
  <xd:doc>Builds a page in the databook for a single cell. Calls the appropriate templates to build each section of the page</xd:doc>
  <xsl:template match="Cell">
    
    <xsl:variable name="CornerSuffix">
      [<xsl:value-of select="@CornerName"/>]
      <!--<xsl:choose>
        <xsl:when test="substring(@CornerName,1,9)=$NoCorner and $Config/@doctype!='PDF'"/>
        <xsl:otherwise> [<xsl:value-of select="@CornerName"/>]</xsl:otherwise>
      </xsl:choose>-->
    </xsl:variable>
    
    <xsl:variable name="Title" select="concat(@Name, $CornerSuffix)"/>
    
    <html>
      <head>
        <title>
          <xsl:value-of select="$Title"/>
        </title>
        <xsl:call-template name="Includes">
          <xsl:with-param name="dir" select="'..'"/>
        </xsl:call-template>
      </head>
      <body onLoad="NanInit();">
        
        <xsl:call-template name="NangateHeader">
          <xsl:with-param name="dir" select="'..'"/>
          <xsl:with-param name="Title" select="$Title"/>
        </xsl:call-template>
        
        <!-- Top navigation links -->
        <xsl:call-template name="AutoBuildNavigationBar"/>

        <!-- Cell contents -->
        <xsl:call-template name="TitleNotes"/> 
        <xsl:call-template name="CreateIndex"/>
        <xsl:call-template name="CellChars"/>
        <xsl:call-template name="TruthTable"/>
        <xsl:call-template name="Schematic"/>
        <xsl:call-template name="PowerConsumption"/>
        <xsl:call-template name="DynamicPowerConsumption"/>
        <xsl:call-template name="GateCapacitance"/>
        <xsl:call-template name="PropagationDelay"/>
        <xsl:call-template name="OutputSlope"/>
        <xsl:call-template name="SetupTime"/>
        <xsl:call-template name="HoldTime"/>
        <xsl:call-template name="Metastability"/>
        <xsl:call-template name="Recovery"/>
        <xsl:call-template name="Removal"/>
        <xsl:call-template name="RRMetastability"/>
        <xsl:call-template name="MinPulseWidth"/>
        <xsl:call-template name="Notes"/> 
        
        <!-- Bottom navigation links -->
        <xsl:call-template name="AutoBuildNavigationBar">
          <xsl:with-param name="Pos">Bottom</xsl:with-param>
        </xsl:call-template>
        
      </body>
    </html>
    
  </xsl:template>
  
  
  
  <xd:doc>Creates the notes that appear at the title of the page</xd:doc>
  <xsl:template name="TitleNotes">
    <p>
      
      <xsl:call-template name="CreateTitleCornerNote">
        <xsl:with-param name="Page"   select="/Cell/@Name"/>
        <xsl:with-param name="PDFLink" select="/Cell/@Name"/>
      </xsl:call-template>
      
      Data for cell <span class="bold"><xsl:value-of select="@Name"/></span>.
      <xsl:variable name="Name" select="@Name"/>
      <xsl:variable name="type">
        <xsl:value-of select="$XmlLibrary/Library/Cells/CellType/Cell[@Name=$Name]/../@Name"/>
      </xsl:variable>
      <xsl:if test="$type != ''">
        The type of this cell is <span class="bold">'<xsl:value-of select="$type"/>'</span>.
      </xsl:if>
      
    <xsl:variable name="corner" select="@CornerName"/>
    
    <xsl:variable name="BN">
      <xsl:call-template name="BasicNotes">
        <xsl:with-param name="Page"       select="/Cell/@Name"/>
        <xsl:with-param name="PDFLink"    select="/Cell/@Name"/>
        <xsl:with-param name="CornerNode" select="$XmlCornerList/CornerList/Corner[@Name=$corner]"/>
      </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="CornerContent">
      <xsl:call-template name="Corner">
        <xsl:with-param name="Corner"  select="$XmlCornerList/CornerList/Corner[@Name=$corner]"/>
        <xsl:with-param name="Page"    select="/Cell/@Name"/>
        <xsl:with-param name="PDFLink" select="/Cell/@Name"/>
      </xsl:call-template>
    </xsl:variable>
    <xsl:if test="$BN != '' or $CornerContent != ''">See <a href="#Notes">notes</a> for additional information.</xsl:if>
      
    </p>
  </xsl:template>
  
  
  
  <!-- Create Index -->
  <xd:doc>Creates a small index at the beginning of the page, to grant quick access to each of its sections</xd:doc>
  <xsl:template name="CreateIndex">
    <xsl:if test="$useSummary='yes'">
      <a name="Summary">
        
        <xsl:call-template name="CreateCollapse">
          <xsl:with-param name="name">Summary</xsl:with-param>
          <xsl:with-param name="dir">..</xsl:with-param>
        </xsl:call-template>
        
        <ol id="_Summary">
          
          <li><a href="#Summary">Summary</a></li>
          <li><a href="#CellChars">General Cell Characteristics</a></li>
          
          <xsl:if test="$useTruthTable">
            <li><a href="#TruthTable">Truth Table</a></li>
          </xsl:if>
          
          <xsl:if test="LayoutFile">
            <li><a href="#CellLayout">Cell Layout</a></li>
          </xsl:if>
          
          <xsl:if test="cell_leakage_power|cell_leakage_power_dynamic">
            <li><a href="#PowerConsumption">Power Consumption</a></li>
          </xsl:if>
          
          <xsl:if test="Pins/Pin/capacitance">
            <li><a href="#GateCapacitance">Gate Capacitance</a></li>
          </xsl:if>
          
          <xsl:if test="Pins/Pin/TimingList/TimingEntry[cell_rise | cell_fall]">
            <li><a href="#PropagationDelay">Propagation Delay</a></li>
          </xsl:if>
          
          <xsl:if test="Pins/Pin/TimingList/TimingEntry[rise_transition|fall_transition]">
            <li><a href="#OutputSlope">Output Slope</a> <xsl:value-of select="format-number($XmlLibrary/Library/slew_lower_threshold_pct_fall, '0')"/>/<xsl:value-of select="format-number($XmlLibrary/Library/slew_upper_threshold_pct_fall, '0')"/></li>
          </xsl:if>
          
          <xsl:if test="Pins/Pin/TimingList/TimingEntry[@TimingType='setup_falling' or @TimingType='setup_rising'][fall_constraint|rise_constraint]">
            <li><a href="#SetupTime">Setup Time</a></li>
          </xsl:if>
          
          <xsl:if test="Pins/Pin/TimingList/TimingEntry[@TimingType='hold_falling' or @TimingType='hold_rising'][rise_constraint|fall_constraint]">
            <li><a href="#HoldTime">Hold Time</a></li>
          </xsl:if>
          
          <xsl:if test="Pins/Pin[PulseWidthHigh|PulseWidthLow]">
            <li><a href="#Metastability">Metastability</a></li>
          </xsl:if>
          
          <xsl:if test="Pins/Pin/min_pulse_width_low">
            <li><a href="#MinPulseWidth">Minimum Pulse Width</a></li>
          </xsl:if>
          
          <li><a href="#Notes">Notes</a></li>
          
        </ol>
        
      </a>
    </xsl:if>
  </xsl:template>
  
  
  
  <!-- Cell Characteristics -->
  <xd:doc>Creates the General Cell Characteristics table</xd:doc>
  <xsl:template name="CellChars">
    <a name="CellChars">
      
      <xsl:call-template name="CreateCollapse">
        <xsl:with-param name="name">General Cell Characteristics</xsl:with-param>
        <xsl:with-param name="tag">CellChars</xsl:with-param>
        <xsl:with-param name="dir">..</xsl:with-param>
      </xsl:call-template>
      
      <xsl:variable name="GenChars" select="GenChars"/>
      
      <span id="_CellChars">
        
        <hr class="Title"/>
        
        <xsl:variable name="Table" select="'CellChars'"/>
        
        <table border="1">
          <colgroup><col/><col/></colgroup>
          <tbody>
            
            <xsl:call-template name="CreateCellCharsUnitAtt">
              <xsl:with-param name="node"      select="$GenChars/Desc"/>
              <xsl:with-param name="name"      select="'Description'"/>
              <xsl:with-param name="Table"     select="$Table"/>
              <xsl:with-param name="node_name" select="concat(name($GenChars), '/Desc')"/>
            </xsl:call-template>
            
            <xsl:if test="(/Cell/@CornerName != $AbsDeviation) and (/Cell/@CornerName != $RelDeviation)">
              <xsl:call-template name="CreateCellCharsUnitAtt">
                <xsl:with-param name="node"      select="$GenChars/Strength"/>
                <xsl:with-param name="name"      select="'Strength'"/>
                <xsl:with-param name="Table"     select="$Table"/>
                <xsl:with-param name="node_name" select="concat(name($GenChars), '/Strength')"/>
              </xsl:call-template>
            </xsl:if>
            
            <xsl:if test="area">
              <tr>
                <th>Cell Area</th>
                <td>
                  <xsl:attribute name="id">
                    <xsl:value-of select="concat('el_', $Table, '_area')"/>
                  </xsl:attribute>
                  <xsl:choose>
                    <xsl:when test="(/Cell/@CornerName = $RelDeviation)">
                      <xsl:value-of select="format-number(area * 100, '0.000')"/> %
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of select="format-number(area, '0.000')"/> um<sup>2</sup>
                    </xsl:otherwise>
                  </xsl:choose> 
                </td>
              </tr>
            </xsl:if>
            
            <xsl:if test="Pins/Pin/function">
              <tr>
                <th>Equation</th>
                <td>
                  
                  <xsl:attribute name="id">
                    <xsl:value-of select="concat('el_', $Table, '_Pins/Pin/function')"/>
                  </xsl:attribute>
                  
                  <xsl:for-each select="Pins/Pin">
                    <xsl:if test="function">
                      <xsl:value-of select="@Name"/> = <xsl:value-of select="function"/>
                      <br/>
                    </xsl:if>
                  </xsl:for-each>
                  
                </td>
              </tr>
            </xsl:if>
            
            <xsl:call-template name="CreateCellCharsUnitAtt">
              <xsl:with-param name="node"      select="$GenChars/Observability"/>
              <xsl:with-param name="name"      select="'Observability'"/>
              <xsl:with-param name="Table"     select="$Table"/>
              <xsl:with-param name="node_name" select="concat(name($GenChars), '/Observability')"/>
            </xsl:call-template>
            
            <xsl:call-template name="CreateCellCharsMultiAtt">
              <xsl:with-param name="node"      select="$GenChars/Enable"/>
              <xsl:with-param name="name"      select="'Enable'"/>
              <xsl:with-param name="Table"     select="$Table"/>
              <xsl:with-param name="node_name" select="concat(name($GenChars), '/Enable')"/>
            </xsl:call-template>
            
            <xsl:call-template name="CreateCellCharsUnitAtt">
              <xsl:with-param name="node"      select="$GenChars/Clock"/>
              <xsl:with-param name="name"      select="'Clock'"/>
              <xsl:with-param name="Table"     select="$Table"/>
              <xsl:with-param name="node_name" select="concat(name($GenChars), '/Clock')"/>
            </xsl:call-template>
            
            <xsl:call-template name="CreateCellCharsUnitAtt">
              <xsl:with-param name="node"      select="$GenChars/SlaveClock"/>
              <xsl:with-param name="name"      select="'Slave Clock'"/>
              <xsl:with-param name="Table"     select="$Table"/>
              <xsl:with-param name="node_name" select="concat(name($GenChars), '/SlaveClock')"/>
            </xsl:call-template>
            
            <xsl:call-template name="CreateCellCharsMultiAtt">
              <xsl:with-param name="node"      select="$GenChars/Reset"/>
              <xsl:with-param name="name"      select="'Reset'"/>
              <xsl:with-param name="Table"     select="$Table"/>
              <xsl:with-param name="node_name" select="concat(name($GenChars), '/Reset')"/>
            </xsl:call-template>
            
            <xsl:call-template name="CreateCellCharsMultiAtt">
              <xsl:with-param name="node"      select="$GenChars/Preset"/>
              <xsl:with-param name="name"      select="'Set'"/>
              <xsl:with-param name="Table"     select="$Table"/>
              <xsl:with-param name="node_name" select="concat(name($GenChars), '/Preset')"/>
            </xsl:call-template>
            
            <xsl:call-template name="CreateCellCharsUnitAtt">
              <xsl:with-param name="node"      select="$GenChars/SensType"/>
              <xsl:with-param name="name"      select="'Sensibility'"/>
              <xsl:with-param name="Table"     select="$Table"/>
              <xsl:with-param name="node_name" select="concat(name($GenChars), '/SensType')"/>
            </xsl:call-template>
            
            <xsl:call-template name="CreateCellCharsUnitAtt">
              <xsl:with-param name="node"      select="$GenChars/Type"/>
              <xsl:with-param name="name"      select="'Type'"/>
              <xsl:with-param name="Table"     select="$Table"/>
              <xsl:with-param name="node_name" select="concat(name($GenChars), '/Type')"/>
            </xsl:call-template>
            
            <xsl:call-template name="CreateCellCharsUnitAtt">
              <xsl:with-param name="node"      select="$GenChars/ScanEnable"/>
              <xsl:with-param name="name"      select="'Scan Enable'"/>
              <xsl:with-param name="Table"     select="$Table"/>
              <xsl:with-param name="node_name" select="concat(name($GenChars), '/ScanEnable')"/>
            </xsl:call-template>
            
            <xsl:call-template name="CreateCellCharsUnitAtt">
              <xsl:with-param name="node"      select="$GenChars/ScanData"/>
              <xsl:with-param name="name"      select="'Scan Data'"/>
              <xsl:with-param name="Table"     select="$Table"/>
              <xsl:with-param name="node_name" select="concat(name($GenChars), '/ScanData')"/>
            </xsl:call-template>
            
            <xsl:call-template name="CreateCellCharsMultiAtt">
              <xsl:with-param name="node"      select="$GenChars/Input"/>
              <xsl:with-param name="name"      select="'Input'"/>
              <xsl:with-param name="Table"     select="$Table"/>
              <xsl:with-param name="node_name" select="concat(name($GenChars), '/Input')"/>
            </xsl:call-template>
            
            <xsl:call-template name="CreateCellCharsMultiAtt">
              <xsl:with-param name="node"      select="$GenChars/Output"/>
              <xsl:with-param name="name"      select="'Output'"/>
              <xsl:with-param name="Table"     select="$Table"/>
              <xsl:with-param name="node_name" select="concat(name($GenChars), '/Output')"/>
            </xsl:call-template>
            
            <xsl:call-template name="CreateCellCharsMultiAtt">
              <xsl:with-param name="node"      select="$GenChars/InOut"/>
              <xsl:with-param name="name"      select="'In/Out'"/>
              <xsl:with-param name="Table"     select="$Table"/>
              <xsl:with-param name="node_name" select="concat(name($GenChars), '/InOut')"/>
            </xsl:call-template>
            
            <xsl:call-template name="CreateCellCharsMultiAtt">
              <xsl:with-param name="node"      select="$GenChars/Internal"/>
              <xsl:with-param name="name"      select="'Internal'"/>
              <xsl:with-param name="Table"     select="$Table"/>
              <xsl:with-param name="node_name" select="concat(name($GenChars), '/Internal')"/>
            </xsl:call-template>
            
          </tbody>
        </table>
        
      </span>
      
    </a>    
  </xsl:template>
  
  
  
  <xd:doc>
    Used by the CellChar template to create a composed entry in the General Cell Characteristics table
    <xd:param name="node" type="element">contains the set of nodes that should compose the entry</xd:param>
    <xd:param name="name" type="string">entry's name</xd:param>
    <xd:param name="node_name" type="string">
      <xd:short>used to identify the entry inside the table</xd:short>
      <xd:detail>Default value is a copy of <i>name</i></xd:detail>
    </xd:param>
    <xd:param name="Table" type="string">identifier for the table where the entry is being inserted</xd:param>
  </xd:doc>
  <xsl:template name="CreateCellCharsMultiAtt">
    
    <xsl:param name="node"/>
    <xsl:param name="name"/>
    <xsl:param name="node_name" select="$name"/>
    <xsl:param name="Table"/>
    
    <xsl:if test="$node">
      <tr>
        <th><xsl:value-of select="$name"/></th>
        <td>
          
          <xsl:attribute name="id">
            <xsl:value-of select="concat('el_', $Table, '_', $node_name)"/>
          </xsl:attribute>
          
          <xsl:for-each select="$node">
            <xsl:value-of select="."/>
            <xsl:if test="position()!=last()">, </xsl:if>
          </xsl:for-each>
          
        </td>
      </tr>
    </xsl:if>
    
  </xsl:template>
  
  
  
  <xd:doc>
    Used by the CellChar template to create an atomic entry in the General Cell Characteristics table
    <xd:param name="node" type="element">contains the nodes whose value should compose the entry</xd:param>
    <xd:param name="name" type="string">entry's name</xd:param>
    <xd:param name="node_name" type="string">
      <xd:short>used to identify the entry inside the table</xd:short>
      <xd:detail>Default value is a copy of <i>name</i></xd:detail>
    </xd:param>
    <xd:param name="Table" type="string">identifier for the table where the entry is being inserted</xd:param>
  </xd:doc>
  <xsl:template name="CreateCellCharsUnitAtt">
    
    <xsl:param name="node"/>
    <xsl:param name="name"/>
    <xsl:param name="node_name" select="$name"/>
    <xsl:param name="Table"/>
    
    <xsl:if test="$node">
      <tr>
        <th><xsl:value-of select="$name"/></th>
        <td>
          <xsl:attribute name="id">
            <xsl:value-of select="concat('el_', $Table, '_', $node_name)"/>
          </xsl:attribute>
          <xsl:value-of select="$node"/>
        </td>
      </tr>
    </xsl:if>
    
  </xsl:template>
  
  
  
  <!-- Truth Table -->
  <xd:doc>Builds a section with the truth table for the cell. Not yet available in the XML files</xd:doc>
  <xsl:template name="TruthTable">
<!--<xsl:if test="document($cellfile)"/>-->
    <xsl:if test="$useTruthTable='yes'">
      <a name="TruthTable">
        
        <xsl:call-template name="CreateCollapse">
          <xsl:with-param name="name">Truth Table</xsl:with-param>
          <xsl:with-param name="tag">TruthTable</xsl:with-param>
          <xsl:with-param name="dir">..</xsl:with-param>
        </xsl:call-template>
        
        <span id="_TruthTable">
          
          <hr class="Title"/>
          <p class="error">NOT AVAILABLE YET! </p>
          
          <table border="1" id="TruthTable">
            
            <colgroup>
              <xsl:for-each select="Pins/Pin">
                <col/>
              </xsl:for-each>
            </colgroup>
            
            <tr>
              <xsl:for-each select="Pins/Pin">
                <th>
                  <xsl:value-of select="@Name"/>
                </th>
              </xsl:for-each>
            </tr>
            
            <tr>
              <xsl:for-each select="Pins/Pin">
                <td class="num">
                  <xsl:attribute name="id">
                    <xsl:value-of select="concat('el_TruthTable_Pins/Pin', position())"/>
                  </xsl:attribute>
                  <xsl:value-of select="'value'"/>
                </td>
              </xsl:for-each>
            </tr>
            
          </table>
          
        </span>
        
      </a>
    </xsl:if>
  </xsl:template>
  
  
  
  <!-- Cell Layout -->
  <xd:doc>Shows an image with the layout of the cell. Not yet available in the XML files</xd:doc>
  <xsl:template name="Schematic">
    <xsl:if test="Schematic">
      <a name="Schematic">
        
        <xsl:call-template name="CreateCollapse">
          <xsl:with-param name="name">Schematic</xsl:with-param>
          <xsl:with-param name="tag">Schematic</xsl:with-param>
          <xsl:with-param name="dir">..</xsl:with-param>
        </xsl:call-template>
        
        <span id="_Schematic">
          <hr class="Title"/>
          <div>
            <xsl:choose>
              <xsl:when test="Schematic/text()">
                <img>
                  <xsl:attribute name="src">
                    <xsl:if test="$DocType='PDF'">@../../Cells/</xsl:if>
                    <xsl:value-of select="Schematic"/>
                  </xsl:attribute>
                  <xsl:attribute name="alt">Schematic image not found.</xsl:attribute>
                </img>
              </xsl:when>
              <xsl:otherwise>Schematic representation not available.</xsl:otherwise>
            </xsl:choose>
          </div>
        </span>
        
      </a>
    </xsl:if>
  </xsl:template>
  
  
  
  <!-- Power Consumption -->
  <xd:doc>Shows the static power consumption of the cell</xd:doc>
  <xsl:template name="PowerConsumption">
    
    <xsl:variable name="unit_node"  select="$UnitNode/cell/power_consumption"/>
    
    <xsl:if test="cell_leakage_power">
      
      <xsl:variable name="SecId"  select="'SP'"/>
      
      <xsl:variable name="SecTitle">
        <xsl:call-template name="Map">
          <xsl:with-param name="key" select="concat($SecId,'_Title')"/>
        </xsl:call-template>
      </xsl:variable>
      
      <xsl:variable name="SecTag">
        <xsl:call-template name="Map">
          <xsl:with-param name="key" select="concat($SecId, '_Tag')"/>
        </xsl:call-template>
      </xsl:variable>
      
      <a name="$SecTag">
        
        <xsl:call-template name="CreateCollapse">
          <xsl:with-param name="name" select="$SecTitle"/>
          <xsl:with-param name="tag"  select="$SecTag"/>
          <xsl:with-param name="dir">..</xsl:with-param>
        </xsl:call-template>
        
        <span>
          
          <xsl:attribute name="id">
            <xsl:value-of select="concat('_',$SecTag)"/>
          </xsl:attribute>
          
          <hr class="Title"/>
          
          <table border="1">
            
            <colgroup><col/><col/></colgroup>
            
            <tr>
              <xsl:if test="cell_leakage_power">
                <th>Static <xsl:value-of select="$unit_node/@label"/></th>
              </xsl:if>
            </tr>
            
            <tr>
              <xsl:if test="cell_leakage_power">
                <td class="num">
                  
                  <xsl:attribute name="id">
                    <xsl:value-of select="'el_PowerConsumption_cell_leakage_power'"/>
                  </xsl:attribute>
                  
                  <xsl:call-template name="ConvertUnit">
                    <xsl:with-param name="value" select="cell_leakage_power"/>
                    <xsl:with-param name="unit_node" select="$unit_node"/>
                  </xsl:call-template>
                  
                </td>
              </xsl:if>
            </tr>
            
          </table>
          
        </span>
        
      </a>
      
    </xsl:if>
    
  </xsl:template>
  
  <!-- Dynamic Power Consumption - NOT USED ANYMORE
  <xd:doc>Shows the dynamic power consumption of the cell. Calls the PrintTimingTable template</xd:doc>
  <xsl:template name="DynamicPowerConsumption">
    <xsl:if test="Pins/Pin/rise_power_1D|Pins/Pin/fall_power_1D|/Pins/Pin/power_1D">
      
      <xsl:variable name="unit_node" select="$UnitNode/cell/dynamic_power_consumption"/>
      <xsl:variable name="SecId" select="'DP'"/>
      
      <xsl:variable name="SecTitle">
        <xsl:call-template name="Map">
          <xsl:with-param name="key" select="concat($SecId,'_Title')"/>
        </xsl:call-template>
      </xsl:variable>
      
      <xsl:variable name="SecTag">
        <xsl:call-template name="Map">
          <xsl:with-param name="key" select="concat($SecId, '_Tag')"/>
        </xsl:call-template>
      </xsl:variable>
      
      <a name="$SecTag">
        
        <xsl:call-template name="CreateCollapse">
          <xsl:with-param name="name" select="$SecTitle"/>
          <xsl:with-param name="tag"  select="$SecTag"/>
          <xsl:with-param name="dir">..</xsl:with-param>
        </xsl:call-template>
        
        <span>
          
          <xsl:attribute name="id">
            <xsl:value-of select="concat('_',$SecTag)"/>
          </xsl:attribute>
          
          <hr class="Title"/>
          
          <xsl:for-each select="Pins/Pin[rise_power_1D|fall_power_1D]">
            <xsl:call-template name="PrintTimingTable">
              <xsl:with-param name="SecId"      select="$SecId"/>
              <xsl:with-param name="table_rise" select="rise_power_1D"/>
              <xsl:with-param name="table_fall" select="fall_power_1D"/>
              <xsl:with-param name="unit_node"  select="$unit_node"/>
              <xsl:with-param name="ignore_v2"  select="'y'"/>
            </xsl:call-template>
          </xsl:for-each>
          
          <xsl:for-each select="Pins/Pin[power_1D]">
            <xsl:call-template name="PrintTimingTable">
              <xsl:with-param name="SecId"         select="$SecId"/>
              <xsl:with-param name="table_rise"    select="power_1D"/>
              <xsl:with-param name="table_fall"    select="null"/>
              <xsl:with-param name="unit_node"     select="$unit_node"/>
              <xsl:with-param name="ignore_v2"     select="'y'"/>
            </xsl:call-template>
          </xsl:for-each>
          
        </span>
        
      </a>
      
    </xsl:if>
  </xsl:template> -->
   
  <!-- Dynamic Power Consumption : cell_fall & cell_rise -->
  <xd:doc>Creates the Dynamic Power Consumption section. Calls the CreateCellPowerSession template</xd:doc>
  <xsl:template name="DynamicPowerConsumption">
    <xsl:if test="Pins/Pin/InternalPowerList/InternalPowerEntry[rise_power|fall_power]">
      <xsl:call-template name="CreateCellPowerSession">
        <xsl:with-param name="table_rise"  select="'rise_power'"/>
        <xsl:with-param name="table_fall"  select="'fall_power'"/>
        <xsl:with-param name="unit_node"   select="$UnitNode/cell/dynamic_power_consumption"/>
        <xsl:with-param name="SecId"       select="'DP'"/>
        <xsl:with-param name="FPId"        select="'FP'"/>
        <xsl:with-param name="RPId"        select="'RP'"/>
        <xsl:with-param name="fp_summary"  select="$XmlLibrary/Library/PowerSummary/Entry[@Name='FP']"/>
        <xsl:with-param name="rp_summary"  select="$XmlLibrary/Library/PowerSummary/Entry[@Name='RP']"/>
      </xsl:call-template>
    </xsl:if>
  </xsl:template>
   
  
  <!-- Gate Capacitance -->
  <xd:doc>Builds the gate capacitance information</xd:doc>
  <xsl:template name="GateCapacitance">
    <xsl:if test="Pins/Pin/capacitance">
      
      <xsl:variable name="unit_node" select="$UnitNode/cell/gate_capacitance"/>
      
      <a name="GateCapacitance">
        
        <xsl:call-template name="CreateCollapse">
          <xsl:with-param name="name">Gate Capacitance</xsl:with-param>
          <xsl:with-param name="tag">GateCapacitance</xsl:with-param>
          <xsl:with-param name="dir">..</xsl:with-param>
        </xsl:call-template>
        
        <xsl:if test="$XmlLibrary/Library/CapSummary">
          <xsl:variable name="SecTag">
            <xsl:call-template name="Map">
              <xsl:with-param name="key" select="'CAP_Tag'"/>
            </xsl:call-template>
          </xsl:variable>
          <xsl:variable name="SecTitle">
            <xsl:call-template name="Map">
              <xsl:with-param name="key" select="'CAP_Title'"/>
            </xsl:call-template>
          </xsl:variable>
          <p>
            <a>
              <xsl:attribute name="href">
                <xsl:value-of select="concat('../', $SecTag,'_', /Cell/@CornerName, $Extensions/Summary)"/>
              </xsl:attribute>
              <xsl:value-of select="$SecTitle"/> for All Cells
            </a>
          </p>
        </xsl:if>
        
        <span id="_GateCapacitance">
          <hr class="Title"/>
          <table border="1">
            
            <colgroup><col/><col/></colgroup>
            
            <tr>
              <th>Input</th>
              <th>Cg <xsl:value-of select="$unit_node/@label"/></th>
            </tr>
            
            <xsl:for-each select="Pins/Pin/capacitance">
              <tr>
                
                <xsl:variable name="pinName" select="normalize-space(translate(../Name, '&quot;', ''))"/><!-- to remove whitespace and quotes -->
                <td>
                  <xsl:value-of select="$pinName"/>
                </td>
                
                <td class="num">
                  
                  <xsl:attribute name="id">
                    <xsl:value-of select="concat('el_GateCapacitance_Pins/Pin/capacitance_', $pinName)"/>
                  </xsl:attribute>
                  <xsl:attribute name="onclick">highlight(this);</xsl:attribute>
                  <xsl:attribute name="onmouseover">highlight(this);</xsl:attribute>
                  <xsl:attribute name="onmouseout">highlight(this);</xsl:attribute>
                  
                  <xsl:call-template name="exceeded">
                    <xsl:with-param name="text">
                      <xsl:call-template name="ConvertUnit">
                        <xsl:with-param name="value"       select="."/>
                        <xsl:with-param name="source_unit" select="$unit_node/@src"/>
                        <xsl:with-param name="target_unit" select="$unit_node/@tgt"/>
                      </xsl:call-template>
                    </xsl:with-param>
                    <xsl:with-param name="exceeded" select="@tolExceeded"/>
                  </xsl:call-template>
                  
                </td>
                
              </tr>
            </xsl:for-each>
            
          </table>
        </span>
        
      </a>
      
    </xsl:if>
  </xsl:template>
  
  
  
  <!-- Propagation Delay : cell_fall & cell_rise -->
  <xd:doc>Creates the Propagation Delay section. Calls the CreateCellTimingSession template</xd:doc>
  <xsl:template name="PropagationDelay">
    <xsl:if test="Pins/Pin/TimingList/TimingEntry[cell_rise|cell_fall]">
      <xsl:call-template name="CreateCellTimingSession">
        <xsl:with-param name="table_rise"  select="'cell_rise'"/>
        <xsl:with-param name="table_fall"  select="'cell_fall'"/>
        <xsl:with-param name="unit_node"   select="$UnitNode/cell/propagation_delay"/>
        <xsl:with-param name="SecId"       select="'PD'"/>
        <xsl:with-param name="has_summary" select="$XmlLibrary/Library/TimingSummary/Entry[@Name='PD']"/>
      </xsl:call-template>
    </xsl:if>
  </xsl:template>
  
  
  
  <!-- Output Slope: rise_transition, fall_transition-->
  <xd:doc>Creates the Output Slope section. Calls the CreateCellTimingSession template</xd:doc>
  <xsl:template name="OutputSlope">
    <xsl:if test="Pins/Pin/TimingList/TimingEntry[rise_transition|fall_transition]">
      <xsl:call-template name="CreateCellTimingSession">
        <xsl:with-param name="table_rise"  select="'rise_transition'"/>
        <xsl:with-param name="table_fall"  select="'fall_transition'"/>
        <xsl:with-param name="unit_node"   select="$UnitNode/cell/output_slope"/>
        <xsl:with-param name="SecId"       select="'OS'"/>
        <xsl:with-param name="has_summary" select="$XmlLibrary/Library/TimingSummary/Entry[@Name='OS']"/>
      </xsl:call-template>
    </xsl:if>
  </xsl:template>
  
  
  
  <!-- Setup Time: [setup_falling or setup_rising] fall_constraint & rise_constraint -->
  <xd:doc>Creates the Setup Time section. Calls the CreateCellTimingSessionSH template</xd:doc>
  <xsl:template name="SetupTime">
    <xsl:if test="Pins/Pin/TimingList/TimingEntry[@TimingType='setup_falling' or @TimingType='setup_rising'][fall_constraint|rise_constraint]">
      <xsl:call-template name="CreateCellTimingSessionSH">
        <xsl:with-param name="table_type_rise" select="'setup_rising'"/>
        <xsl:with-param name="table_type_fall" select="'setup_falling'"/>
        <xsl:with-param name="table_rise"      select="'rise_constraint'"/>
        <xsl:with-param name="table_fall"      select="'fall_constraint'"/>
        <xsl:with-param name="unit_node"       select="$UnitNode/cell/setup_time"/>
        <xsl:with-param name="SecId"           select="'ST'"/>
        <xsl:with-param name="has_summary"     select="$XmlLibrary/Library/TimingSummary/Entry[@Name='ST']"/>
      </xsl:call-template>
    </xsl:if>
  </xsl:template>
  
  
  
  <!-- Hold Time: [hold_falling] fall_constraint & rise_constraint -->
  <xd:doc>Creates the Hold Time section. Calls the CreateCellTimingSessionSH template</xd:doc>
  <xsl:template name="HoldTime">
    <xsl:if test="Pins/Pin/TimingList/TimingEntry[@TimingType='hold_falling' or @TimingType='hold_rising'][rise_constraint|fall_constraint]">
      <xsl:call-template name="CreateCellTimingSessionSH">
        <xsl:with-param name="table_type_rise" select="'hold_rising'"/>
        <xsl:with-param name="table_type_fall" select="'hold_falling'"/>
        <xsl:with-param name="table_rise"      select="'rise_constraint'"/>
        <xsl:with-param name="table_fall"      select="'fall_constraint'"/>
        <xsl:with-param name="unit_node"       select="$UnitNode/cell/hold_time"/>
        <xsl:with-param name="SecId"           select="'HT'"/>
        <xsl:with-param name="has_summary"     select="$XmlLibrary/Library/TimingSummary/Entry[@Name='HT']"/>
      </xsl:call-template>
    </xsl:if>
  </xsl:template>
  
  
  
  <!-- Setup/Hold Metastability Window -->
  <xd:doc>Creates the Setup/Hold Metastability Window table. Calls the CreateSecBasics template</xd:doc>
  <xsl:template name="Metastability">
    <xsl:param name="SecId" select="'MS'"/>
    <xsl:param name="SecTitle">
      <xsl:call-template name="Map">
        <xsl:with-param name="key" select="concat($SecId,'_Title')"/>
      </xsl:call-template>
    </xsl:param>
    
    <xsl:param name="SecTag">
      <xsl:call-template name="Map">
        <xsl:with-param name="key" select="concat($SecId, '_Tag')"/>
      </xsl:call-template>
    </xsl:param>

    <xsl:variable name="CornerName" select="/Cell/@CornerName"/>

    <xsl:variable name="has_summary"      select="$XmlLibrary/Library/TimingSummary/Entry[@Name='MS']"/>

    <xsl:if test="Pins/Pin[PulseWidthHigh|PulseWidthLow]">
      <xsl:call-template name="CreateSecBasics">
        <xsl:with-param name="SecId"      select="'MS'"/>
        <xsl:with-param name="internal">

          <xsl:if test="$has_summary">
            <p>
              <a>
                <xsl:attribute name="href">
                  <xsl:choose>
                    <xsl:when test="$Config/@doctype='PDF'">
                      <xsl:variable name="SumSecTitle">
                        <xsl:call-template name="Map">
                          <xsl:with-param name="map" select="$MapNode/summary"/>
                          <xsl:with-param name="key" select="concat($SecId,'_Title')"/>
                        </xsl:call-template>
                      </xsl:variable>
                      <xsl:value-of select="concat('@', $SumSecTitle, ' [', $CornerName,']')"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of select="concat('../', $SecTag,'_', $CornerName, $Extensions/Summary)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:attribute>
                <xsl:value-of select="$SecTitle"/> for All Cells
              </a>
            </p>
          </xsl:if>

          <xsl:variable name="unit_node"  select="$UnitNode/cell/metastability"/>
          <xsl:for-each select="Pins/Pin">
            <xsl:call-template name="PrintTimingTable">
              <xsl:with-param name="SecId"         select="'MS'"/>
              <xsl:with-param name="table_rise"    select="PulseWidthHigh"/>
              <xsl:with-param name="table_fall"    select="PulseWidthLow"/>
              <xsl:with-param name="unit_node"     select="$unit_node"/>
            </xsl:call-template>
          </xsl:for-each>
        </xsl:with-param>
      </xsl:call-template>
    </xsl:if>
  </xsl:template> 
  
  
  <xd:doc>Creates the Recovery Time section. Calls the CreateCellTimingSessionSH template</xd:doc>
  <xsl:template name="Recovery">
    <xsl:if test="Pins/Pin/TimingList/TimingEntry[@TimingType='recovery_falling' or @TimingType='recovery_rising'][fall_constraint|rise_constraint]">
      <xsl:call-template name="CreateCellTimingSessionSH">
        <xsl:with-param name="table_type_rise" select="'recovery_rising'"/>
        <xsl:with-param name="table_type_fall" select="'recovery_falling'"/>
        <xsl:with-param name="table_rise"      select="'rise_constraint'"/>
        <xsl:with-param name="table_fall"      select="'fall_constraint'"/>
        <xsl:with-param name="unit_node"       select="$UnitNode/cell/recovery"/>
        <xsl:with-param name="SecId"           select="'RC'"/>
        <xsl:with-param name="has_summary"     select="$XmlLibrary/Library/TimingSummary/Entry[@Name='RC']"/>
      </xsl:call-template>
    </xsl:if>
  </xsl:template>
  
  
  
  <xd:doc>Creates the Removal Time section. Calls the CreateCellTimingSessionSH template</xd:doc>
  <xsl:template name="Removal">
    <xsl:if test="Pins/Pin/TimingList/TimingEntry[@TimingType='removal_falling' or @TimingType='removal_rising'][rise_constraint|fall_constraint]">
      <xsl:call-template name="CreateCellTimingSessionSH">
        <xsl:with-param name="table_type_rise" select="'removal_rising'"/>
        <xsl:with-param name="table_type_fall" select="'removal_falling'"/>
        <xsl:with-param name="table_rise"      select="'rise_constraint'"/>
        <xsl:with-param name="table_fall"      select="'fall_constraint'"/>
        <xsl:with-param name="unit_node"       select="$UnitNode/cell/removal"/>
        <xsl:with-param name="SecId"           select="'RM'"/>
       <xsl:with-param name="has_summary"     select="$XmlLibrary/Library/TimingSummary/Entry[@Name='RM']"/>
      </xsl:call-template>
    </xsl:if>
  </xsl:template>
  
  
  
  <!-- Recovery Metastability Window -->
  <xd:doc>Creates the Recovery/Removal Metastability Window table. Calls the CreateSecBasics template</xd:doc>
  <xsl:template name="RRMetastability">
    <xsl:if test="Pins/Pin[RecoveryLow|RecoveryHigh]">
      <xsl:call-template name="CreateSecBasics">
        <xsl:with-param name="SecId" select="'RRMS'"/>
        <xsl:with-param name="internal">
          <xsl:variable name="unit_node"  select="$UnitNode/cell/rr_metastability"/>
          <xsl:for-each select="Pins/Pin">
            <xsl:call-template name="PrintTimingTable">
              <xsl:with-param name="SecId"         select="'RRMS'"/>
              <xsl:with-param name="table_rise"    select="RecoveryHigh"/>
              <xsl:with-param name="table_fall"    select="RecoveryLow"/>
              <xsl:with-param name="unit_node"     select="$unit_node"/>
            </xsl:call-template>
          </xsl:for-each>
        </xsl:with-param>
      </xsl:call-template>
    </xsl:if>
  </xsl:template>
  
  
  
  <!-- Minimum Pulse Width -->
  <xd:doc>Builds the Minimum Pulse Width section</xd:doc>
  <xsl:template name="MinPulseWidth">
    <xsl:if test="Pins/Pin/min_pulse_width_low|Pins/Pin/min_pulse_width_high">
      <xsl:variable name="unit_node"  select="$UnitNode/cell/min_pulse_width"/>
      <a name="MinPulseWidth">
        
        <xsl:call-template name="CreateCollapse">
          <xsl:with-param name="name">Minimum Pulse Width</xsl:with-param>
          <xsl:with-param name="tag">MinPulseWidth</xsl:with-param>
          <xsl:with-param name="dir">..</xsl:with-param>
        </xsl:call-template>
        
        <span id="_MinPulseWidth">
          <hr class="Title"/>
          <table border="1">
            
            <colgroup><col/><col/></colgroup>
            
            <tr>
              <th>Input</th>
              <th>Time <xsl:value-of select="$unit_node/@label"/></th>
            </tr>
            
            <xsl:for-each select="Pins/Pin">
              
              <xsl:if test="min_pulse_width_low">
                <tr>
                  <td><xsl:value-of select="@Name"/> low</td>
                  <td class="num">
                    
                    <xsl:attribute name="id">
                      <xsl:value-of select="concat('el_GateCapacitance_Pins/Pin/min_pulse_width_low_', @Name)"/>
                    </xsl:attribute>
                    
                    <xsl:call-template name="ConvertUnit">
                      <xsl:with-param name="value"       select="min_pulse_width_low"/>
                      <xsl:with-param name="source_unit" select="$unit_node/@src"/>
                      <xsl:with-param name="target_unit" select="$unit_node/@tgt"/>
                    </xsl:call-template>
                    
                  </td>
                </tr>
              </xsl:if>
              
              <xsl:if test="min_pulse_width_high">
                <tr>
                  <td><xsl:value-of select="@Name"/> high</td>
                  <td class="num">
                    
                    <xsl:attribute name="id">
                      <xsl:value-of select="concat('el_GateCapacitance_Pins/Pin/min_pulse_width_high_', @Name)"/>
                    </xsl:attribute>
                    
                    <xsl:call-template name="ConvertUnit">
                      <xsl:with-param name="value"       select="min_pulse_width_high"/>
                      <xsl:with-param name="source_unit" select="$unit_node/@src"/>
                      <xsl:with-param name="target_unit" select="$unit_node/@tgt"/>
                    </xsl:call-template>
                    
                  </td>
                </tr>
              </xsl:if>
              
            </xsl:for-each>
            
          </table>
        </span>
        
      </a>
    </xsl:if>
  </xsl:template>
  
  
  
  <!-- Notes -->
  <xd:doc>Creates the Notes section at the bottom of the page</xd:doc>
  <xsl:template name="Notes">

    <xsl:variable name="corner" select="@CornerName"/>
    
    <xsl:variable name="BN">
      <xsl:call-template name="BasicNotes">
        <xsl:with-param name="Page"       select="/Cell/@Name"/>
        <xsl:with-param name="PDFLink"    select="/Cell/@Name"/>
        <xsl:with-param name="CornerNode" select="$XmlCornerList/CornerList/Corner[@Name=$corner]"/>
      </xsl:call-template>
    </xsl:variable>
    
    <xsl:variable name="CornerContent">
      <xsl:call-template name="Corner">
        <xsl:with-param name="Corner"  select="$XmlCornerList/CornerList/Corner[@Name=$corner]"/>
        <xsl:with-param name="Page"    select="/Cell/@Name"/>
        <xsl:with-param name="PDFLink" select="/Cell/@Name"/>
      </xsl:call-template>
    </xsl:variable>
  
    <xsl:if test="$BN != '' or $CornerContent != ''">
      <a name="Notes">
        
        <xsl:call-template name="CreateCollapse">
          <xsl:with-param name="name">Notes</xsl:with-param>
          <xsl:with-param name="dir">..</xsl:with-param>
        </xsl:call-template>
        
        <span id="_Notes">
          <hr class="Title"/>
          <ul>
            
            <xsl:call-template name="BasicNotes">
              <xsl:with-param name="Page"       select="/Cell/@Name"/>
              <xsl:with-param name="PDFLink"    select="/Cell/@Name"/>
              <xsl:with-param name="CornerNode" select="$XmlCornerList/CornerList/Corner[@Name=$corner]"/>
            </xsl:call-template>
            
            <li>
              <xsl:call-template name="Corner">
                <xsl:with-param name="Corner"  select="$XmlCornerList/CornerList/Corner[@Name=$corner]"/>
                <xsl:with-param name="Page"    select="/Cell/@Name"/>
                <xsl:with-param name="PDFLink" select="/Cell/@Name"/>
              </xsl:call-template>
            </li>
            
        <!--<li>
              <p> Dynamic power consumption is based on an average using
                <xsl:value-of select="'[VALUE]'"/> input slope and output loads from
                <xsl:value-of select="'[VALUE]'"/>pF to
                <xsl:value-of select="'[VALUE]'"/>pF.
              </p>
            </li>-->
            
          </ul>
        </span>
        
      </a>
    </xsl:if>
  </xsl:template>
  
  
  
  <xd:doc>
    Used to build the Setup/Hold and Recovery/Removal sections. Calls the CreateSecBasics and PrintTimingTable templates
    <xd:param name="SecId" type="string">identifier for the section to be created</xd:param>
    <xd:param name="table_rise" type="string">name of the XML element holding the rise table</xd:param>
    <xd:param name="table_fall" type="string">name of the XML element holding the fall table</xd:param>
    <xd:param name="table_type_rise" type="string">if it matches with the timing type attribute, the corresponding timing entry to be processed</xd:param>
    <xd:param name="table_type_fall" type="string">if it matches with the timing type attribute, the corresponding timing entry to be processed</xd:param>\
    <xd:param name="unit_node" type="element">a XML element which holds the necessary information for unit conversion</xd:param>
  </xd:doc>
  <xsl:template name="CreateCellTimingSessionSH">
    
    <xsl:param name="SecId"/>
    <xsl:param name="table_rise"/>
    <xsl:param name="table_fall"/>
    <xsl:param name="table_type_rise"/>
    <xsl:param name="table_type_fall"/>
    <xsl:param name="unit_node"/>
    <xsl:param name="has_summary"/>

    <xsl:param name="SecTitle">
      <xsl:call-template name="Map">
        <xsl:with-param name="key" select="concat($SecId,'_Title')"/>
      </xsl:call-template>
    </xsl:param>
    
    <xsl:param name="SecTag">
      <xsl:call-template name="Map">
        <xsl:with-param name="key" select="concat($SecId, '_Tag')"/>
      </xsl:call-template>
    </xsl:param>

    <xsl:variable name="CornerName" select="/Cell/@CornerName"/>
    
    <xsl:call-template name="CreateSecBasics">
      <xsl:with-param name="SecId" select="$SecId"/>
      <xsl:with-param name="internal">

        <xsl:if test="$has_summary">
          <p>
            <a>
              <xsl:attribute name="href">
                <xsl:choose>
                  <xsl:when test="$Config/@doctype='PDF'">
                    <xsl:variable name="SumSecTitle">
                      <xsl:call-template name="Map">
                        <xsl:with-param name="map" select="$MapNode/summary"/>
                        <xsl:with-param name="key" select="concat($SecId,'_Title')"/>
                      </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="concat('@', $SumSecTitle, ' [', $CornerName,']')"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="concat('../', $SecTag,'_', $CornerName, $Extensions/Summary)"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:attribute>
              <xsl:value-of select="$SecTitle"/> for All Cells
            </a>
          </p>
        </xsl:if>

        <hr class="Title"/>
        <xsl:for-each select="Pins/Pin/TimingList/TimingEntry[@TimingType=$table_type_rise or @TimingType=$table_type_fall]">
          <xsl:call-template name="PrintTimingTable">
            <xsl:with-param name="SecId"      select="$SecId"/>
            <xsl:with-param name="table_fall" select="*[name()=$table_fall]"/>
            <xsl:with-param name="table_rise" select="*[name()=$table_rise]"/>
            <xsl:with-param name="unit_node"  select="$unit_node"/>
          </xsl:call-template>
        </xsl:for-each>
      </xsl:with-param>
    </xsl:call-template>
    
  </xsl:template>
  

  <xd:doc>
    Used to build the Dynamic Power Consumption section. Calls the CreateSecBasics, CreateCellPlotLink and PrintTimingTable templates
    <xd:param name="SecId" type="string">identifier for the section to be created</xd:param>
    <xd:param name="FPId" type="string">identifier for Fall Power section</xd:param>
    <xd:param name="RPId" type="string">identifier for Rise Power section</xd:param>
    <xd:param name="SecTitle" type="string">
      <xd:short>title for the section to be created.</xd:short>
      <xd:detail>Default value is extracted through the <i>Map</i> template</xd:detail>
    </xd:param>
    <xd:param name="FPTag" type="string">
      <xd:short>tag for Fall Power section.</xd:short>
      <xd:detail>Default value is extracted through the <i>Map</i> template</xd:detail>
    </xd:param>
    <xd:param name="RPTag" type="string">
      <xd:short>tag for Rise Power section.</xd:short>
      <xd:detail>Default value is extracted through the <i>Map</i> template</xd:detail>
    </xd:param>
    <xd:param name="table_rise" type="string">name of the XML element holding the rise table</xd:param>
    <xd:param name="table_fall" type="string">name of the XML element holding the fall table</xd:param>
    <xd:param name="unit_node" type="element">a XML element which holds the necessary information for unit conversion</xd:param>
    <xd:param name="ignore_v2" type="char">acts as a boolean flag which indicates if the second variable of the template should be ignored. Possible values are 'y' and 'n' (default)</xd:param>
    <xd:param name="fp_summary" type="element">acts as a boolean flag. If the pointed element exists, creates a link to the corresponding fall power summary page</xd:param>
    <xd:param name="fp_summary" type="element">acts as a boolean flag. If the pointed element exists, creates a link to the corresponding rise power summary page</xd:param>
  </xd:doc>
  <xsl:template name="CreateCellPowerSession">
    
    <xsl:param name="SecId"/>
    <xsl:param name="FPId"/>
    <xsl:param name="RPId"/>
    
    <xsl:param name="SecTitle">
      <xsl:call-template name="Map">
        <xsl:with-param name="key" select="concat($SecId,'_Title')"/>
      </xsl:call-template>
    </xsl:param>

    <xsl:param name="FPTag">
      <xsl:call-template name="Map">
        <xsl:with-param name="key" select="concat($FPId, '_Tag')"/>
      </xsl:call-template>
    </xsl:param>

    <xsl:param name="RPTag">
      <xsl:call-template name="Map">
        <xsl:with-param name="key" select="concat($RPId, '_Tag')"/>
      </xsl:call-template>
    </xsl:param>
    
    <xsl:param name="table_rise"/>
    <xsl:param name="table_fall"/>
    <xsl:param name="unit_node"/>
    <xsl:param name="ignore_v2" select="'n'"/>
    <xsl:param name="fp_summary" select="/*/hasALLSummary"/>
    <xsl:param name="rp_summary" select="/*/hasALLSummary"/>
    
    <xsl:variable name="CornerName" select="/Cell/@CornerName"/>
    
    <xsl:call-template name="CreateSecBasics">
      <xsl:with-param name="SecId" select="$SecId"/>
      <xsl:with-param name="internal">
        
        <xsl:if test="$fp_summary">
          <p>
            <a>
              <xsl:attribute name="href">
                <xsl:choose>
                  <xsl:when test="$Config/@doctype='PDF'">
                    <xsl:variable name="SumSecTitle">
                      <xsl:call-template name="Map">
                        <xsl:with-param name="map" select="$MapNode/summary"/>
                        <xsl:with-param name="key" select="concat($FPId,'_Title')"/>
                      </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="concat('@', $SumSecTitle, ' [', $CornerName,']')"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="concat('../', $FPTag,'_', $CornerName, $Extensions/Summary)"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:attribute>
              <xsl:value-of select="$SecTitle"/> (fall) for All Cells
            </a>
          </p>
        </xsl:if>

        <xsl:if test="$rp_summary">
          <p>
            <a>
              <xsl:attribute name="href">
                <xsl:choose>
                  <xsl:when test="$Config/@doctype='PDF'">
                    <xsl:variable name="SumSecTitle">
                      <xsl:call-template name="Map">
                        <xsl:with-param name="map" select="$MapNode/summary"/>
                        <xsl:with-param name="key" select="concat($RPId,'_Title')"/>
                      </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="concat('@', $SumSecTitle, ' [', $CornerName,']')"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="concat('../', $RPTag,'_', $CornerName, $Extensions/Summary)"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:attribute>
              <xsl:value-of select="$SecTitle"/> (rise) for All Cells
            </a>
          </p>
        </xsl:if>
        
        <hr class="Title"/>
        
        <p>
          <xsl:if test="$DocType!='PDF' and (*[name()=$table_fall]/LUT/@Plot or *[name()=$table_rise]/LUT/@Plot)">
            <table border="1">
              
              <colgroup><col/><col/></colgroup>
              
              <tr>
                <xsl:call-template name="CreateCellPlotLink">
                  <xsl:with-param name="table" select="$table_fall"/>
                  <xsl:with-param name="SecId" select="$SecId"/>
                  <xsl:with-param name="title" select="'Fall Plot:'"/>
                </xsl:call-template>
              </tr>
              
              <tr>
                <xsl:call-template name="CreateCellPlotLink">
                  <xsl:with-param name="table" select="$table_rise"/>
                  <xsl:with-param name="SecId" select="$SecId"/>
                  <xsl:with-param name="title" select="'Rise Plot:'"/>
                </xsl:call-template>
              </tr>
              
            </table>
          </xsl:if>
        </p>
        
        <xsl:for-each select="Pins/Pin/InternalPowerList/InternalPowerEntry">
          <xsl:call-template name="PrintTimingTable">
            <xsl:with-param name="SecId"      select="$SecId"/>
            <xsl:with-param name="table_rise" select="*[name()=$table_rise]"/>
            <xsl:with-param name="table_fall" select="*[name()=$table_fall]"/>
            <xsl:with-param name="unit_node"  select="$unit_node"/>
            <xsl:with-param name="ignore_v2"  select="$ignore_v2"/>
          </xsl:call-template>
        </xsl:for-each>
        
      </xsl:with-param>
      
    </xsl:call-template>
    
  </xsl:template>


  
  
  <xd:doc>
    Used to build the Output Slope and Propagation Delay sections. Calls the CreateSecBasics, CreateCellPlotLink and PrintTimingTable templates
    <xd:param name="SecId" type="string">identifier for the section to be created</xd:param>
    <xd:param name="SecTitle" type="string">
      <xd:short>title for the section to be created.</xd:short>
      <xd:detail>Default value is extracted through the <i>Map</i> template</xd:detail>
    </xd:param>
    <xd:param name="SecTag" type="string">
      <xd:short>tag for the section to be created.</xd:short>
      <xd:detail>Default value is extracted through the <i>Map</i> template</xd:detail>
    </xd:param>
    <xd:param name="table_rise" type="string">name of the XML element holding the rise table</xd:param>
    <xd:param name="table_fall" type="string">name of the XML element holding the fall table</xd:param>
    <xd:param name="unit_node" type="element">a XML element which holds the necessary information for unit conversion</xd:param>
    <xd:param name="ignore_v2" type="char">acts as a boolean flag which indicates if the second variable of the template should be ignored. Possible values are 'y' and 'n' (default)</xd:param>
    <xd:param name="has_summary" type="element">acts as a boolean flag. If the pointed element exists, creates a link to the corresponding timing summary page</xd:param>
  </xd:doc>
  <xsl:template name="CreateCellTimingSession">
    
    <xsl:param name="SecId"/>
    
    <xsl:param name="SecTitle">
      <xsl:call-template name="Map">
        <xsl:with-param name="key" select="concat($SecId,'_Title')"/>
      </xsl:call-template>
    </xsl:param>
    
    <xsl:param name="SecTag">
      <xsl:call-template name="Map">
        <xsl:with-param name="key" select="concat($SecId, '_Tag')"/>
      </xsl:call-template>
    </xsl:param>
    
    <xsl:param name="table_rise"/>
    <xsl:param name="table_fall"/>
    <xsl:param name="unit_node"/>
    <xsl:param name="ignore_v2" select="'n'"/>
    <xsl:param name="has_summary" select="/*/hasALLSummary"/>
    
    <xsl:variable name="CornerName" select="/Cell/@CornerName"/>
    
    <xsl:call-template name="CreateSecBasics">
      <xsl:with-param name="SecId" select="$SecId"/>
      <xsl:with-param name="internal">
        
        <xsl:if test="$has_summary">
          <p>
            <a>
              <xsl:attribute name="href">
                <xsl:choose>
                  <xsl:when test="$Config/@doctype='PDF'">
                    <xsl:variable name="SumSecTitle">
                      <xsl:call-template name="Map">
                        <xsl:with-param name="map" select="$MapNode/summary"/>
                        <xsl:with-param name="key" select="concat($SecId,'_Title')"/>
                      </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="concat('@', $SumSecTitle, ' [', $CornerName,']')"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="concat('../', $SecTag,'_', $CornerName, $Extensions/Summary)"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:attribute>
              <xsl:value-of select="$SecTitle"/> for All Cells
            </a>
          </p>
        </xsl:if>
        
        <hr class="Title"/>
        
        <p>
          <xsl:if test="$DocType!='PDF' and (*[name()=$table_fall]/LUT/@Plot or *[name()=$table_rise]/LUT/@Plot)">
            <table border="1">
              
              <colgroup><col/><col/></colgroup>
              
              <tr>
                <xsl:call-template name="CreateCellPlotLink">
                  <xsl:with-param name="table" select="$table_fall"/>
                  <xsl:with-param name="SecId" select="$SecId"/>
                  <xsl:with-param name="title" select="'Fall Plot:'"/>
                </xsl:call-template>
              </tr>
              
              <tr>
                <xsl:call-template name="CreateCellPlotLink">
                  <xsl:with-param name="table" select="$table_rise"/>
                  <xsl:with-param name="SecId" select="$SecId"/>
                  <xsl:with-param name="title" select="'Rise Plot:'"/>
                </xsl:call-template>
              </tr>
              
            </table>
          </xsl:if>
        </p>
        
        <xsl:for-each select="Pins/Pin/TimingList/TimingEntry"><!--|../*[fall_power|rise_power|power]-->
          <xsl:call-template name="PrintTimingTable">
            <xsl:with-param name="SecId"      select="$SecId"/>
            <xsl:with-param name="table_rise" select="*[name()=$table_rise]"/>
            <xsl:with-param name="table_fall" select="*[name()=$table_fall]"/>
            <xsl:with-param name="unit_node"  select="$unit_node"/>
            <xsl:with-param name="ignore_v2"  select="$ignore_v2"/>
          </xsl:call-template>
        </xsl:for-each>
        
      </xsl:with-param>
      
    </xsl:call-template>
    
  </xsl:template>
  
  
  
  <xd:doc>
    Associates a plot icon to a table, linking it to a pop-up window with its graphical representation. Calls the CreatePlotLink template
    <xd:param name="table" type="string">name of the XML element holding the table to be plotted</xd:param>
    <xd:param name="title" type="string">plot title</xd:param>
    <xd:param name="SecId" type="string">identifier to the section whose plot will be created</xd:param>
  </xd:doc>
  <xsl:template name="CreateCellPlotLink">
    
    <xsl:param name="table"/>
    <xsl:param name="title"/>
    <xsl:param name="SecId"/>
    
    <xsl:variable name="Title">
      <xsl:call-template name="Map">
        <xsl:with-param name="map" select="$MapNode/plot/timing"/>
        <xsl:with-param name="key" select="$SecId"/>
      </xsl:call-template>
    </xsl:variable>
    
    <xsl:if test="$DocType!='PDF' and (Pins/Pin[*[name()=$table]/LUT/@Plot] or *[name()=$table]/LUT/@Plot)">
      
      <th>
        <xsl:value-of select="$title"/>
      </th>
      
      <td> 
        <xsl:choose>
          <xsl:when test="*[name()=$table]/LUT/@Plot">
            <xsl:call-template name="CreatePlotLink">
              
              <xsl:with-param name="alt" select="'Cell'"/>
              <xsl:with-param name="link" select="*[name()=$table]/LUT/@Plot"/>
              
              <xsl:with-param name="context">
                <![CDATA[<span class="weakComment">]]>Cell <![CDATA[</span><span class="comment">]]><xsl:value-of select="/Cell/@Name"/>
                <![CDATA[</span>]]>
              </xsl:with-param>
              
              <xsl:with-param name="title">
                <![CDATA[<p class="SubTitle">]]>
                <xsl:value-of select="$Title"/>
                <![CDATA[</p>]]>
              </xsl:with-param>
              
            </xsl:call-template>
          </xsl:when>
          <xsl:otherwise>Cell</xsl:otherwise>
        </xsl:choose>
      </td>
      
      <xsl:for-each select="Pins/Pin[*[name()=$table]/LUT/@Plot]">
        <td> 
          <xsl:choose>
            <xsl:when test="*[name()=$table]/LUT/@Plot">
              <xsl:call-template name="CreatePlotLink">
                
                <xsl:with-param name="alt">
                  <xsl:value-of select="@Name"/>
                </xsl:with-param>
                
                <xsl:with-param name="link" select="*[name()=$table]/LUT/@Plot"/>
                
                <xsl:with-param name="context">
                  <![CDATA[<span class="weakComment">]]>Cell <![CDATA[<span class="comment">]]><xsl:value-of select="/Cell/@Name"/>
                  <![CDATA[</span><br/>]]>Pin <![CDATA[<span class="comment">]]><xsl:value-of select="@Name"/>
                  <![CDATA[</span></span>]]>
                </xsl:with-param>
                
                <xsl:with-param name="title">
                  <![CDATA[<p class="SubTitle">]]>
                  <xsl:value-of select="$Title"/>
                  <![CDATA[</p>]]>
                </xsl:with-param>
                
              </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="@Name"/>
            </xsl:otherwise>
          </xsl:choose>
        </td>
      </xsl:for-each>
      
    </xsl:if>
    
  </xsl:template>
  
  
  
  <!-- Auxiliar template to write the output slope limits -->
  <!--NOT USED ANYMORE-->
  <xd:doc>
    Writes the output slope threshold limits. Used by the <i>CreateSecBasics</i> template
    <xd:param name="XmlLib" type="element">Root element of the XML tree containing the slope limits</xd:param>
  </xd:doc>
  <xsl:template name="writeSlopes">
    <xsl:param name="XmlLib"/>
    <xsl:if test="$XmlLib/slew_lower_threshold_pct_fall and $XmlLib/slew_upper_threshold_pct_fall and $XmlLib/slew_lower_threshold_pct_rise and $XmlLib/slew_upper_threshold_pct_rise">
      <xsl:choose>
        <xsl:when test="$XmlLib/slew_lower_threshold_pct_fall=$XmlLib/slew_lower_threshold_pct_rise and $XmlLib/slew_upper_threshold_pct_fall=$XmlLib/slew_upper_threshold_pct_rise">
         (<xsl:value-of select="format-number($XmlLib/slew_lower_threshold_pct_fall, '0')"/>/<xsl:value-of select="format-number($XmlLib/slew_upper_threshold_pct_fall, '0')"/>)
        </xsl:when>
        <xsl:otherwise>
          (fall <xsl:value-of select="format-number($XmlLib/slew_lower_threshold_pct_fall, '0')"/>/<xsl:value-of select="format-number($XmlLib/slew_upper_threshold_pct_fall, '0')"/>,
           rise <xsl:value-of select="format-number($XmlLib/slew_lower_threshold_pct_rise, '0')"/>/<xsl:value-of select="format-number($XmlLib/slew_upper_threshold_pct_rise, '0')"/>)
        </xsl:otherwise>
      </xsl:choose>
    </xsl:if>
  </xsl:template>
  
  
  
  <xd:doc>
    Used to build the different table sections inside the cell page
    <xd:param name="SecId" type="string">identifier for the section to be created</xd:param>
    <xd:param name="SecTitle" type="string">
      <xd:short>title for the section to be created.</xd:short>
      <xd:detail>Default value is extracted from the <i>Map</i> template and the library threshold parameters</xd:detail>
    </xd:param>
    <xd:param name="SecTag" type="string">
      <xd:short>tag for the section to be created.</xd:short>
      <xd:detail>Default value is extracted from the <i>Map</i> template</xd:detail>
    </xd:param>
    <xd:param name="internal" type="HTML">section contents</xd:param>
  </xd:doc>
  <xsl:template name="CreateSecBasics">
    
    <xsl:param name="SecId"/>
    
    <xsl:param name="SecTitle">
      
      <xsl:call-template name="Map">
        <xsl:with-param name="key" select="concat($SecId,'_Title')"/>
      </xsl:call-template>

    </xsl:param>

    <xsl:param name="SecTag">
      <xsl:call-template name="Map">
        <xsl:with-param name="key" select="concat($SecId, '_Tag')"/>
      </xsl:call-template>
    </xsl:param>
    
    <xsl:param name="internal"/>
    
    <xsl:variable name="CtpLink">
      <xsl:choose>
        <xsl:when test="$SecId=$PD">
          <xsl:variable name="path">..</xsl:variable>
          <xsl:choose>
            <xsl:when test="$LibMode!='normal'">

              <xsl:variable name="CornerName" select="/*/@CornerName"/>
              <xsl:variable name="CornerNode" select="$XmlCornerList/CornerList/Corner[@Name=$CornerName]"/>
              <xsl:variable name="RefNode" select="$XmlCornerList/CornerList/Corner[@Id=$CornerNode/@Ref]"/>
              <xsl:variable name="XmlLib" select="document($RefNode/@File)"/>

              <xsl:call-template name="CreateCTPLink">
                <xsl:with-param name="XmlLib" select="$XmlLib/Library"/>
                <xsl:with-param name="path" select="$path"/>
                <xsl:with-param name="type">propagation</xsl:with-param>
                <xsl:with-param name="unateness">binate</xsl:with-param>
                <xsl:with-param name="risefall">rise</xsl:with-param>
              </xsl:call-template>
              <xsl:text> / </xsl:text>
              <xsl:call-template name="CreateCTPLink">
                <xsl:with-param name="XmlLib" select="$XmlLib/Library"/>
                <xsl:with-param name="path" select="$path"/>
                <xsl:with-param name="type">propagation</xsl:with-param>
                <xsl:with-param name="unateness">binate</xsl:with-param>
                <xsl:with-param name="risefall">fall</xsl:with-param>
              </xsl:call-template>

            </xsl:when>
            <xsl:otherwise>
              <xsl:call-template name="CreateCTPLink">
                <xsl:with-param name="XmlLib" select="$XmlLibrary/Library"/>   
                <xsl:with-param name="path" select="$path"/>       
                <xsl:with-param name="type">propagation</xsl:with-param>
                <xsl:with-param name="unateness">binate</xsl:with-param>
                <xsl:with-param name="risefall">rise</xsl:with-param>
              </xsl:call-template>
              <xsl:text> / </xsl:text>
              <xsl:call-template name="CreateCTPLink">
                <xsl:with-param name="XmlLib" select="$XmlLibrary/Library"/>
                <xsl:with-param name="path" select="$path"/>
                <xsl:with-param name="type">propagation</xsl:with-param>
                <xsl:with-param name="unateness">binate</xsl:with-param>
                <xsl:with-param name="risefall">fall</xsl:with-param>
              </xsl:call-template>
            </xsl:otherwise>
          </xsl:choose>

        </xsl:when>
        <xsl:when test="$SecId=$OS">
          <xsl:variable name="path">..</xsl:variable>
          <xsl:choose>
            <xsl:when test="$LibMode!='normal'">

              <xsl:variable name="CornerName" select="/*/@CornerName"/>
              <xsl:variable name="CornerNode" select="$XmlCornerList/CornerList/Corner[@Name=$CornerName]"/>
              <xsl:variable name="RefNode" select="$XmlCornerList/CornerList/Corner[@Id=$CornerNode/@Ref]"/>
              <xsl:variable name="XmlLib" select="document($RefNode/@File)"/>

              <xsl:call-template name="CreateCTPLink">
                <xsl:with-param name="XmlLib" select="$XmlLib/Library"/>
                <xsl:with-param name="path" select="$path"/>
                <xsl:with-param name="type">slope</xsl:with-param>
                <xsl:with-param name="risefall">rise</xsl:with-param>
              </xsl:call-template>
              <xsl:text> / </xsl:text>
              <xsl:call-template name="CreateCTPLink">
                <xsl:with-param name="XmlLib" select="$XmlLib/Library"/>
                <xsl:with-param name="path" select="$path"/>
                <xsl:with-param name="type">slope</xsl:with-param>
                <xsl:with-param name="risefall">fall</xsl:with-param>
              </xsl:call-template>

            </xsl:when>
            <xsl:otherwise>
              <xsl:call-template name="CreateCTPLink">
                <xsl:with-param name="XmlLib" select="$XmlLibrary/Library"/>   
                <xsl:with-param name="path" select="$path"/>       
                <xsl:with-param name="type">slope</xsl:with-param>
                <xsl:with-param name="risefall">rise</xsl:with-param>
              </xsl:call-template>
              <xsl:text> / </xsl:text>
              <xsl:call-template name="CreateCTPLink">
                <xsl:with-param name="XmlLib" select="$XmlLibrary/Library"/>
                <xsl:with-param name="path" select="$path"/>
                <xsl:with-param name="type">slope</xsl:with-param>
                <xsl:with-param name="risefall">fall</xsl:with-param>
              </xsl:call-template>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:when> 
      </xsl:choose>
    </xsl:variable>

    <a>
      
      <xsl:attribute name="name">
        <xsl:value-of select="$SecTag"/>
      </xsl:attribute>
      
      <xsl:call-template name="CreateCollapse">
        <xsl:with-param name="name" select="$SecTitle"/>
        <xsl:with-param name="tag"  select="$SecTag"/>
        <xsl:with-param name="dir">..</xsl:with-param>
        <xsl:with-param name="extra" select="$CtpLink"/>
      </xsl:call-template>
      
      <span>
        <xsl:attribute name="id">_<xsl:value-of select="$SecTag"/></xsl:attribute>
        <xsl:copy-of select="$internal"/>
      </span>
      
    </a>
    
  </xsl:template>
  
</xsl:stylesheet>
